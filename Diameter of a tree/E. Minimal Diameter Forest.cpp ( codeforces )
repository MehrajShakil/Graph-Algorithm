///   BISMILLAHIR RAHMANIR RAHEEM
///   ALLAH IS WATCHING ME
///   ALLAH save us from COVID-19.Amin.

///   Every soul shall taste death.

///   Tag ::

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

///  order_of_key return number of elements less than x.
///  find_by_order return index.

using namespace std;
using namespace __gnu_pbds;


#define MOHAMMAD  ios::sync_with_stdio(0);cin.tie(0);
#define all(x)    (x).begin(), (x).end()
#define AE        cout << fixed << setprecision(10);

int dx8[] = {0, 0, 1, 1, 1, -1, -1, -1}; // 8-direction.......
int dy8[] = {1,-1, 1, -1, 0, 0, -1, 1};
int dx4[]= {1,-1,0,0}; // 4-direction...........
int dy4[]= {0,0,1,-1};

using ll = long long;
const ll MOD = 1e9 + 7;

typedef tree< int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef tree<pair<int, int>,null_type,less<pair<int, int>>,rb_tree_tag,tree_order_statistics_node_update> ordered_multiset;

/// debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

/// Modular arithmetic
inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a)   { return modPow(a, MOD-2); }  /// When MOD is prime.
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }

//***********************************************  The END **********************************************************************************************************************************
const ll N = 1e3;
const ll INF = 1e18;
const ll limit = (1LL<<64) - 1;
vector < ll > e[N+1] , temp;

vector < pair < ll , ll > > res;
ll visit[N+1] , depx[N+10] , depy[N+10];

void dfs ( ll node ){
///dbg ( node );
visit[node] = 2;
temp.push_back( node );
for ( auto child : e[node] ){
     if ( visit[child]==0 ) dfs ( child );
}

}

ll dfs1 ( ll node , ll par ){

ll mxi = 0;
if ( e[node].size()==1 and e[node][0]==par ) return 0;
for ( auto child : e[node] ){
       if ( child==par) continue;
       mxi = max ( mxi , 1 + dfs1 ( child , node ));
}
return mxi;
}

void dfs2 ( ll node , ll par , ll lev ){

depx[node] = lev;
for ( auto child : e[node] ){
     if ( par==child ) continue;
     dfs2 ( child , node , lev + 1 );
}

}
void dfs3 ( ll node , ll par , ll lev ){

depy[node] = lev;
for ( auto child : e[node] ){
     if ( par==child ) continue;
     dfs3 ( child , node , lev + 1 );
}

}

int main()
{

  MOHAMMAD

  ll node , edge , u , v;
  cin >> node >> edge;

  while ( edge-- ){
       cin >> u >> v;
       e[u].push_back ( v );
       e[v].push_back ( u );
  }
  
  ll uu = -1 , vv = -1 , dia = 0 , dd = 0 , times = 0 , fix = 0 , mxx = 0;
  priority_queue < pair < ll , ll > > pq;

  for ( ll i = 1 ; i<=node ; ++i ){
       if ( visit[i]==2) continue;
       temp.clear();
       times++;
       /// if still this node is unvisited then it is a cc. and from this node I choose one node from which depth[x] is minimum possible.
       dfs ( i );
       ll mn = 1e18 , mx = 0;
       for ( auto nn : temp ){
            ll x = dfs1 ( nn , -1 );
            if(mn>=x){
                vv = nn; /// vv is my x .
                mn = x;  /// mn is my depth[x].
            }
            mx = max ( mx , x ); //// eqn====1
       }

       if ( uu==-1 ){
          uu = vv;
          dd = mx;
          pq.push( { mn , vv } ); /// i push them pq.
          continue;
       }

       pq.push( { mn , vv } ); /// same
  }


  if ( times==1) cout << dd << "\n"; /// if cc is one there. then diameter is the mx depth from any node to any node. goto eqn====1
  else{
      /// while ( pq.size() ){

              ll cost = pq.top().first;
              ll uu = pq.top().second;
              pq.pop();
              ll cost1 = pq.top().first;
              ll vv = pq.top().second;
              pq.pop();
             /// dbg ( cost , cost1 );
              dia = cost + cost1 + 1;
     //  }

     res.push_back( { uu , vv } );
     while ( pq.size() ){
          ll vv = pq.top().second;
          pq.pop();
          res.push_back( { uu , vv } );
     }

     for ( auto it : res ){
          ll u = it.first;
          ll v = it.second;
          e[u].push_back ( v );
          e[v].push_back ( u );
     }

     dfs2 ( 1 , -1 , 0 ); /// now i got n-1 node. and its become a tree. So, now i find the diameter using greedy approach.
     ll xx , mxx = 0;
     for ( ll i =1 ; i<=node ; ++i ){
         if(depx[i]>=mxx){
                mxx = depx[i];
                xx = i;
         }
     }
    /// dbg ( xx );
     dfs3 ( xx , -1 , 0 );

     mxx = 0;
     for ( ll i =1 ; i<=node ; ++i ){
         if(depy[i]>=mxx){
                mxx = depy[i];
         }
     }

     cout << max ( dia , mxx ) << "\n";

  for ( auto it : res ){
       cout << it.first << " " << it.second << "\n";
  }

  }




}


/*






  Alhamdulillah
*/
